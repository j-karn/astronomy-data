# -*- coding: utf-8 -*-
"""Week_1_Understanding and detecting Pulsars

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QnVEk6a7XdtbPvfNA661DRG3vKEQs2sm

### Find a mean of a set of signals
"""

# upload csv to colab
import pandas as pd
from google.colab import files
data_to_load = files.upload()

# reading data1.csv

# import library
import numpy as np

# open csv, strip out white space, and split to list of string using ','
data = []
for line in open('data1.csv'):
  data.append(line.strip().split(','))

# remove " from the string inside list using list comprehension
data1 = [[x.replace('\"','') for x in i] for i in data]

# convert string to float
data1_f = np.asarray(data1, float)

print(data1_f)

# Write a mean_datasets function that reads in a list of CSV files and returns an array of the mean of each cell in the data files

def mean_datasets(file_names):
  import numpy as np
  data_m = []
  for file in file_names:
    data_n = []
    for line in open(file):
      data_n.append(line.strip().split(','))
      data_remove = [[x.replace('\"','') for x in i] for i in data_n]
      data_clean = np.asarray(data_remove, float)
    data_m.append(data_clean)
  #return data_m


  def calculating_mean(data_m):
    result = sum(data_m)/ len(data_m)
    return np.round(result,1)

  return(calculating_mean(data_m))

# Mean of the three datasets
print(mean_datasets(['data1.csv', 'data2.csv','data3.csv']))

"""---

### Write a ```load_fits``` function that loads in a FITS file and finds the position of the brightest pixel in its image data. To make this function work for arbitrary files, pass the name of the FITS file as an argument to the function.
"""

# import libraries
from astropy.io import fits
import numpy as np

# open fits file
image_file = fits.open('http://chandra.harvard.edu/photo/2009/crab/fits/crab.fits')

# check header information
image_file[0].header

# get file info
image_file.info()

image_data = image_file[0].data
print(image_data.shape)

image_data = image_file[0].data
image_data

# find max brightness value within the array

print(image_data.max())
print(np.max(image_data))
print(image_data.argmax()) # get the position (flat) of the max value in the array

# find indices of where the brightest spot is

indices = np.where(image_data == image_data.max())
indices

# convert a flat index or array of flat indices into a tuple of coordinate arrays
from numpy import unravel_index

ind = unravel_index(image_data.argmax(), image_data.shape)
ind

# function to read FITS file and identify the brightest pixel

def load_fits(x):
  import numpy as np
  from astropy.io import fits
  from numpy import unravel_index

  file = fits.open(x) # open FITS file
  file1 = file[0].data
  pos = file1.argmax() # get the position (flat) of the max value in the array
  ind = unravel_index(pos, file1.shape) # this return indices as tuple

  return ind

# check result

load_fits('http://chandra.harvard.edu/photo/2009/crab/fits/crab.fits')

"""---

### Write a ```mean_fits``` function that takes a list of FITS files as an argument, reads them in, and returns the mean image data of the FITS files.

### All the images have the same dimensions and your calculated mean array should match those dimensions. Assuming we will only look at the central value of your returned array, which is where we expect the pulsar to be
"""

def mean_fits(*files):
  from astropy.io import fits
  import numpy as np

  data_sec = []
  for file in files:
    for i in file:
      open_file = fits.open(i)
      data_file = open_file[0].data
      data_sec.append(data_file)

  data = np.sum(data_sec, axis=0)
  count = np.size(files) # counting how many files were input, noting not using lens because input were arrays
  data_mean = data / count
  return data_mean

# check result
# assuming these are images of the same pulsars and their brightest pixels have been stacked at the centre
# actual files provided on the learning platform

data  = mean_fits(['http://chandra.harvard.edu/photo/2009/crab/fits/crab.fits', 'https://chandra.harvard.edu/photo/2008/cena/fits/cena_med.fits','https://chandra.harvard.edu/photo/2008/30dor/fits/30dor_high.fits'])[512,512]
print(data)

# Commented out IPython magic to ensure Python compatibility.
# visualise crab nebula in xray wavelength from Chandra

# import libraries
import matplotlib.pyplot as plt
# %matplotlib inline
from astropy.visualization import astropy_mpl_style


plt.style.use(astropy_mpl_style)
plt.figure(figsize=(10,10))
plt.imshow(image_data, cmap='gray')
plt.colorbar()

